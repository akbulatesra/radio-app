import Head from 'next/head';
import { Orbitron } from 'next/font/google';
import { useEffect, useState } from 'react';
import Select from 'react-select';
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import styles from '@/styles/Home.module.scss';
import {
  getCountriesFunction,
  getTagsFunction,
  getRadioStationsByCountryFunction,
  getRadioStationsByTagFunction,
  getLanguagesFunction,
  getRadioStationByLanguageFunction,
} from '../utils/functionsApi';
import { handleCountry, handleSelect } from '@/utils/functions';
import Loading from '@/components/Loading';
import Radio from '@/components/Radio';

const orbitron = Orbitron({
  subsets: ['latin'],
  weight: '500',
});

export default function Home() {
  const [channels, setChannels] = useState([]);
  const [countryOptions, setCountryOptions] = useState([]);
  const [tagsOption, setTagsOption] = useState([]);
  const [languagesOption, setLanguagesOption] = useState([]);
  const [station, setStation] = useState(0);
  const [control, setControl] = useState(false);
  const [selectedCountry, setSelectedCountry] = useState(null);
  const [selectedTag, setSelectedTag] = useState(null);
  const [selectedLanguage, setSelectedLanguage] = useState(null);
  const [playingStation, setPlayingStation] = useState(null);
  const [deneme, setDeneme] = useState(null);
  const getOptionLabel = (option) => option.label;

  const handleCheckPlaying = (event) => {
    const audioElement = event.target;
    setControl(!audioElement.paused);
  };

  useEffect(() => {
    getCountriesFunction(setCountryOptions);
    getTagsFunction(setTagsOption);
    getLanguagesFunction(setLanguagesOption);
  }, []);

  useEffect(() => {
    selectedCountry !== null &&
      getRadioStationsByCountryFunction(setChannels, selectedCountry);
  }, [selectedCountry]);

  useEffect(() => {
    selectedLanguage !== null &&
      getRadioStationByLanguageFunction(setChannels, selectedLanguage);
  }, [selectedLanguage]);

  useEffect(() => {
    selectedTag !== null &&
      getRadioStationsByTagFunction(setChannels, selectedTag);
  }, [selectedTag]);

  useEffect(() => {
    channels?.length !== 0 && setPlayingStation(channels?.[station]?.name);
  }, [channels, station]);
  console.log(channels);
  return (
    <>
      <Head>
        <title>Vintage Vibe</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={`${styles.wrapper} ${orbitron.className}`}>
        <ToastContainer pauseOnHover theme="colored" />
        <div className={styles.loaderWrapper}>
          {control === false && selectedCountry !== null && <Loading />}
        </div>
        <div className={styles.imageWrapper}>
          <Radio
            setStation={setStation}
            station={station}
            playingStation={playingStation}
            channels={channels}
          />
          <section className={styles.list}>
            <Select
              options={countryOptions}
              className={styles.select}
              placeholder="Countries"
              onChange={(value) =>
                handleSelect(
                  value.label,
                  setSelectedCountry,
                  setSelectedLanguage,
                  setSelectedTag
                )
              }
              value={{
                value: selectedCountry,
                label: selectedCountry === null ? 'Countries' : selectedCountry,
              }}
              getOptionLabel={getOptionLabel}
            />
            <Select
              options={tagsOption}
              className={styles.select}
              placeholder="Tags"
              value={{
                value: selectedTag,
                label: selectedTag === null ? 'Tags' : selectedTag,
              }}
              getOptionLabel={getOptionLabel}
              onChange={(value) =>
                handleSelect(
                  value.label,
                  setSelectedTag,
                  setSelectedCountry,
                  setSelectedLanguage
                )
              }
            />
            <Select
              options={languagesOption}
              className={styles.select}
              placeholder="Languages"
              value={{
                value: selectedLanguage,
                label:
                  selectedLanguage === null ? 'Languages' : selectedLanguage,
              }}
              getOptionLabel={getOptionLabel}
              onChange={(value) =>
                handleSelect(
                  value.label,
                  setSelectedLanguage,
                  setSelectedTag,
                  setSelectedCountry
                )
              }
            />
          </section>
        </div>

        <audio
          src={channels?.[station]?.url}
          autoPlay
          controls
          className={styles.audio}
          onTimeUpdate={handleCheckPlaying}
        ></audio>
      </main>
    </>
  );
}
